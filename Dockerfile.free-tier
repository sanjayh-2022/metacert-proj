# Dockerfile - Optimized for AWS Free Tier t2.micro (1GB RAM)
FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY contracts/package*.json ./contracts/

# Install dependencies with memory optimization for t2.micro
RUN npm ci --only=production --no-audit --prefer-offline

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Generate Prisma client
RUN npx prisma generate

# Build Next.js with memory limits for t2.micro
ENV NODE_OPTIONS="--max-old-space-size=512"
RUN npm run build

# Production image, copy all the files and run next
FROM base AS production
WORKDIR /app

ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=512"

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy built application
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next ./.next
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json
COPY --from=builder /app/app.js ./app.js
COPY --from=builder /app/contracts ./contracts
COPY --from=builder /app/prisma ./prisma
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma

# Create directories for uploads and logs
RUN mkdir -p uploads logs && chown nextjs:nodejs uploads logs

# Install PM2 globally with minimal footprint
RUN npm install -g pm2@latest

# Copy PM2 configuration optimized for t2.micro
COPY ecosystem.config.js .

USER nextjs

EXPOSE 3000 8080

# Health check to monitor application
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:3000/ || exit 1

# Start both servers with PM2
CMD ["pm2-runtime", "start", "ecosystem.config.js"]