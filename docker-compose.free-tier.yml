# docker-compose.yml - AWS Free Tier optimized (t2.micro with 1GB RAM)
version: '3.8'

services:
  app:
    build:
      context: .
      target: production
    ports:
      - "3000:3000"
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - NEXT_PUBLIC_ALCHEMY_SEPOLIA_API=${NEXT_PUBLIC_ALCHEMY_SEPOLIA_API}
      - NEXT_PUBLIC_SMART_CONTRACT_ADDRESS=${NEXT_PUBLIC_SMART_CONTRACT_ADDRESS}
      - JWT_SECRET=${JWT_SECRET}
      - NEXT_PUBLIC_ACCOUNT_PRIVATE_KEY=${NEXT_PUBLIC_ACCOUNT_PRIVATE_KEY}
      - NODE_OPTIONS=--max-old-space-size=512
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    # Memory limits for t2.micro (1GB total RAM)
    deploy:
      resources:
        limits:
          memory: 800M # Reserve 200MB for system processes
        reservations:
          memory: 400M
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# Note: 
# - No local MySQL service to conserve memory on t2.micro
# - Using AWS RDS db.t2.micro instance instead
# - Memory limits set to prevent OOM on Free Tier instance
# - Reduced logging to conserve disk space